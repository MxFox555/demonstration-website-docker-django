version: '3.9'

services:
  web:
    container_name: gunicorn
    build: 
      context: ./gunicorn
      dockerfile: Dockerfile.prod
    command: gunicorn stockinterestmetric.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/app/web/staticfiles
      - guni_vol:/home/app/web/
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db

  db:
    container_name: postgres
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env.prod.db

  nginx:
    container_name: nginx
    build: 
      context: ./nginx
      dockerfile: Dockerfile.prod
    volumes:
      - static_volume:/home/app/web/staticfiles
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - nginx_vol:/etc/nginx/conf.d/
      - /var/log/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
      - "800:800"
    depends_on:
      - web
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - nginx_vol:/etc/nginx/conf.d/
      - ./certbot/entrypoint.sh:/entrypoint.sh
    #entrypoint: /entrypoint.sh
    #entrypoint: "certbot certonly --standalone --preferred-challenges http -d stockinterestmetric.com"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  server:
    container_name: server_1
    build: ./server
    command: python entry.py
    volumes:
      - ./server:/server/
    expose:
      - 4443

  pgbackups:
    container_name: backup
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backup:/backups
    env_file:
      - ./.env.prod.db
    links:
      - db:db
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@every 0h30m00s
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8080

  cron:
    container_name: cron
    build: ./cron
    volumes:
      - guni_vol:/usr/src/app/
    env_file:
      - ./.env.prod
    command: /cron/entrypoint.sh

  #pgadmin:
    #container_name: pgadmin_container
    #image: dpage/pgadmin4
    #restart: always
    #expose:
    #  - "8080:80"
    #environment:
    #  PGADMIN_DEFAULT_EMAIL: admin@email.com
    #  PGADMIN_DEFAULT_PASSWORD: admin
    #  PGADMIN_LISTEN_PORT: 80
    #volumes:
    #  - ./pgadmin/pgadmin-data:/pgadmin-data
    #links:
    #  - "db:pgsql-server"

volumes:
  postgres_data:
  static_volume:
  nginx_vol:
  guni_vol:
